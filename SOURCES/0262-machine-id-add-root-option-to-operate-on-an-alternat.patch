From 99c06d718c91c91d0992869777c15b457f95443a Mon Sep 17 00:00:00 2001
From: Greg KH <gregkh@linuxfoundation.org>
Date: Fri, 14 Mar 2014 04:43:04 +0000
Subject: [PATCH] machine-id: add --root option to operate on an alternate fs
 tree

This makes it possible to initialize the /etc/machine-id file on an
arbitrary filesystem hierarchy.  This helps systems that wish to run
this at image creation time in a subdirectory, or from initramfs before
pivot-root is called.

[tomegun: converted to using _cleanup_free_ macros]

Conflicts:
	man/systemd-machine-id-setup.xml
	src/machine-id-setup/machine-id-setup-main.c

(cherry picked from commit 92f2f92edcad46ce4098ee26504edca0a1dad68e)

Related: #1111199
---
 man/systemd-machine-id-setup.xml             | 23 +++++++--------
 src/core/machine-id-setup.c                  | 44 ++++++++++++++++++----------
 src/core/machine-id-setup.h                  |  2 +-
 src/core/main.c                              |  2 +-
 src/machine-id-setup/machine-id-setup-main.c | 17 ++++++++---
 5 files changed, 53 insertions(+), 35 deletions(-)

diff --git a/man/systemd-machine-id-setup.xml b/man/systemd-machine-id-setup.xml
index 7b3aa7e..b879b40 100644
--- a/man/systemd-machine-id-setup.xml
+++ b/man/systemd-machine-id-setup.xml
@@ -21,7 +21,8 @@
   along with systemd; If not, see <http://www.gnu.org/licenses/>.
 -->
 
-<refentry id="systemd-machine-id-setup">
+<refentry id="systemd-machine-id-setup"
+          xmlns:xi="http://www.w3.org/2001/XInclude">
 
         <refentryinfo>
                 <title>systemd-machine-id-setup</title>
@@ -96,19 +97,15 @@
 
                 <variablelist>
                         <varlistentry>
-                                <term><option>-h</option></term>
-                                <term><option>--help</option></term>
-
-                                <listitem><para>Prints a short help
-                                text and exits.</para></listitem>
-                        </varlistentry>
-
-                        <varlistentry>
-                                <term><option>--version</option></term>
-
-                                <listitem><para>Prints a short version
-                                string and exits.</para></listitem>
+                                <term><option>--root=ROOT</option></term>
+                                <listitem><para>Takes a directory path
+                                as an argument. All paths will be
+                                prefixed with the given alternate ROOT
+                                path, including config search paths.
+                                </para></listitem>
                         </varlistentry>
+                        <xi:include href="standard-options.xml" xpointer="help" />
+                        <xi:include href="standard-options.xml" xpointer="version" />
                 </variablelist>
 
         </refsect1>
diff --git a/src/core/machine-id-setup.c b/src/core/machine-id-setup.c
index 18e015f..291930e 100644
--- a/src/core/machine-id-setup.c
+++ b/src/core/machine-id-setup.c
@@ -59,18 +59,22 @@ static int shorten_uuid(char destination[36], const char *source) {
         return -EINVAL;
 }
 
-static int generate(char id[34]) {
+static int generate(char id[34], const char *root) {
         int fd, r;
         unsigned char *p;
         sd_id128_t buf;
         char *q;
         ssize_t k;
         const char *vm_id;
+        _cleanup_free_ char *dbus_machine_id = NULL;
 
         assert(id);
 
+        if (asprintf(&dbus_machine_id, "%s/var/lib/dbus/machine-id", root) < 0)
+                return log_oom();
+
         /* First, try reading the D-Bus machine id, unless it is a symlink */
-        fd = open("/var/lib/dbus/machine-id", O_RDONLY|O_CLOEXEC|O_NOCTTY|O_NOFOLLOW);
+        fd = open(dbus_machine_id, O_RDONLY|O_CLOEXEC|O_NOCTTY|O_NOFOLLOW);
         if (fd >= 0) {
                 k = loop_read(fd, id, 33, false);
                 close_nointr_nofail(fd);
@@ -150,12 +154,20 @@ static int generate(char id[34]) {
         return 0;
 }
 
-int machine_id_setup(void) {
+int machine_id_setup(const char *root) {
         _cleanup_close_ int fd = -1;
         int r;
         bool writable;
         struct stat st;
         char id[34]; /* 32 + \n + \0 */
+        _cleanup_free_ char *etc_machine_id = NULL;
+        _cleanup_free_ char *run_machine_id = NULL;
+
+        if (asprintf(&etc_machine_id, "%s/etc/machine-id", root) < 0)
+                return log_oom();
+
+        if (asprintf(&run_machine_id, "%s/run/machine-id", root) < 0)
+                return log_oom();
 
         RUN_WITH_UMASK(0000) {
                 /* We create this 0444, to indicate that this isn't really
@@ -163,13 +175,13 @@ int machine_id_setup(void) {
                  * will be owned by root it doesn't matter much, but maybe
                  * people look. */
 
-                fd = open("/etc/machine-id", O_RDWR|O_CREAT|O_CLOEXEC|O_NOCTTY, 0444);
+                fd = open(etc_machine_id, O_RDWR|O_CREAT|O_CLOEXEC|O_NOCTTY, 0444);
                 if (fd >= 0)
                         writable = true;
                 else {
-                        fd = open("/etc/machine-id", O_RDONLY|O_CLOEXEC|O_NOCTTY);
+                        fd = open(etc_machine_id, O_RDONLY|O_CLOEXEC|O_NOCTTY);
                         if (fd < 0) {
-                                log_error("Cannot open /etc/machine-id: %m");
+                                log_error("Cannot open %s: %m", etc_machine_id);
                                 return -errno;
                         }
 
@@ -193,7 +205,7 @@ int machine_id_setup(void) {
         /* Hmm, so, the id currently stored is not useful, then let's
          * generate one */
 
-        r = generate(id);
+        r = generate(id, root);
         if (r < 0)
                 return r;
 
@@ -211,27 +223,27 @@ int machine_id_setup(void) {
          * /run/machine-id as a replacement */
 
         RUN_WITH_UMASK(0022) {
-                r = write_string_file("/run/machine-id", id);
+                r = write_string_file(run_machine_id, id);
         }
         if (r < 0) {
-                log_error("Cannot write /run/machine-id: %s", strerror(-r));
-                unlink("/run/machine-id");
+                log_error("Cannot write %s: %s", run_machine_id, strerror(-r));
+                unlink(run_machine_id);
                 return r;
         }
 
         /* And now, let's mount it over */
-        r = mount("/run/machine-id", "/etc/machine-id", NULL, MS_BIND, NULL);
+        r = mount(run_machine_id, etc_machine_id, NULL, MS_BIND, NULL);
         if (r < 0) {
-                log_error("Failed to mount /etc/machine-id: %m");
-                unlink_noerrno("/run/machine-id");
+                log_error("Failed to mount %s: %m", etc_machine_id);
+                unlink_noerrno(run_machine_id);
                 return -errno;
         }
 
-        log_info("Installed transient /etc/machine-id file.");
+        log_info("Installed transient %s file.", etc_machine_id);
 
         /* Mark the mount read-only */
-        if (mount(NULL, "/etc/machine-id", NULL, MS_BIND|MS_RDONLY|MS_REMOUNT, NULL) < 0)
-                log_warning("Failed to make transient /etc/machine-id read-only: %m");
+        if (mount(NULL, etc_machine_id, NULL, MS_BIND|MS_RDONLY|MS_REMOUNT, NULL) < 0)
+                log_warning("Failed to make transient %s read-only: %m", etc_machine_id);
 
         return 0;
 }
diff --git a/src/core/machine-id-setup.h b/src/core/machine-id-setup.h
index b9e6b4d..b0583ee 100644
--- a/src/core/machine-id-setup.h
+++ b/src/core/machine-id-setup.h
@@ -21,4 +21,4 @@
   along with systemd; If not, see <http://www.gnu.org/licenses/>.
 ***/
 
-int machine_id_setup(void);
+int machine_id_setup(const char *root);
diff --git a/src/core/main.c b/src/core/main.c
index 00fd394..afd5f6f 100644
--- a/src/core/main.c
+++ b/src/core/main.c
@@ -1503,7 +1503,7 @@ int main(int argc, char *argv[]) {
                 kmod_setup();
 #endif
                 hostname_setup();
-                machine_id_setup();
+                machine_id_setup("");
                 loopback_setup();
 
                 test_mtab();
diff --git a/src/machine-id-setup/machine-id-setup-main.c b/src/machine-id-setup/machine-id-setup-main.c
index eb2d514..f4dc705 100644
--- a/src/machine-id-setup/machine-id-setup-main.c
+++ b/src/machine-id-setup/machine-id-setup-main.c
@@ -29,12 +29,15 @@
 #include "log.h"
 #include "build.h"
 
+static const char *arg_root = "";
+
 static int help(void) {
 
         printf("%s [OPTIONS...]\n\n"
                "Initialize /etc/machine-id from a random source.\n\n"
                "  -h --help             Show this help\n"
-               "     --version          Show package version\n",
+               "     --version          Show package version\n"
+               "     --root             Filesystem root\n",
                program_invocation_short_name);
 
         return 0;
@@ -43,13 +46,15 @@ static int help(void) {
 static int parse_argv(int argc, char *argv[]) {
 
         enum {
-                ARG_VERSION = 0x100
+                ARG_VERSION = 0x100,
+                ARG_ROOT,
         };
 
         static const struct option options[] = {
                 { "help",      no_argument,       NULL, 'h'           },
                 { "version",   no_argument,       NULL, ARG_VERSION   },
-                { NULL,        0,                 NULL, 0             }
+                { "root",      required_argument, NULL, ARG_ROOT      },
+                {}
         };
 
         int c;
@@ -70,6 +75,10 @@ static int parse_argv(int argc, char *argv[]) {
                         puts(SYSTEMD_FEATURES);
                         return 0;
 
+                case ARG_ROOT:
+                        arg_root = optarg;
+                        break;
+
                 case '?':
                         return -EINVAL;
 
@@ -97,5 +106,5 @@ int main(int argc, char *argv[]) {
         if (r <= 0)
                 return r < 0 ? EXIT_FAILURE : EXIT_SUCCESS;
 
-        return machine_id_setup() < 0 ? EXIT_FAILURE : EXIT_SUCCESS;
+        return machine_id_setup(arg_root) < 0 ? EXIT_FAILURE : EXIT_SUCCESS;
 }
