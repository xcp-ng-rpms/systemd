From dc5e623cbd6c4250d514ec1c9d67c338cd71934c Mon Sep 17 00:00:00 2001
From: Lennart Poettering <lennart@poettering.net>
Date: Thu, 26 Sep 2013 19:58:33 +0200
Subject: [PATCH] util: properly handle the root dir in PATH_FOREACH_PREFIX

Also add PATH_FOREACH_PREFIX_MORE which includes the specified dir
itself in the iteration
---
 src/shared/path-util.h    |  9 ++++++++-
 src/test/test-path-util.c | 34 ++++++++++++++++++++++++++++++----
 2 files changed, 38 insertions(+), 5 deletions(-)

diff --git a/src/shared/path-util.h b/src/shared/path-util.h
index 03f2cf2..0a42de7 100644
--- a/src/shared/path-util.h
+++ b/src/shared/path-util.h
@@ -52,5 +52,12 @@ int path_is_os_tree(const char *path);
 
 int find_binary(const char *name, char **filename);
 
+/* Iterates through the path prefixes of the specified path, going up
+ * the tree, to root. Also returns "" (and not "/"!) for the root
+ * directory. Excludes the specified directory itself */
 #define PATH_FOREACH_PREFIX(prefix, path) \
-        for (char *_slash = strrchr(path_kill_slashes(strcpy(prefix, path)), '/'); _slash && !(*_slash = 0); _slash = strrchr((prefix), '/'))
+        for (char *_slash = ({ path_kill_slashes(strcpy(prefix, path)); streq(prefix, "/") ? NULL : strrchr(prefix, '/'); }); _slash && !(*_slash = 0); _slash = strrchr((prefix), '/'))
+
+/* Same as PATH_FOREACH_PREFIX but also includes the specified path itself */
+#define PATH_FOREACH_PREFIX_MORE(prefix, path) \
+        for (char *_slash = ({ path_kill_slashes(strcpy(prefix, path)); if (streq(prefix, "/")) prefix[0] = 0; strrchr(prefix, 0); }); _slash && !(*_slash = 0); _slash = strrchr((prefix), '/'))
diff --git a/src/test/test-path-util.c b/src/test/test-path-util.c
index e303e48..ed3b315 100644
--- a/src/test/test-path-util.c
+++ b/src/test/test-path-util.c
@@ -107,29 +107,55 @@ static void test_find_binary(void) {
 }
 
 static void test_prefixes(void) {
-        static const char* values[] = { "/a/b/c", "/a/b", "/a", "", NULL};
-        unsigned i = 0;
+        static const char* values[] = { "/a/b/c/d", "/a/b/c", "/a/b", "/a", "", NULL};
+        unsigned i;
         char s[PATH_MAX];
+        bool b;
 
-        PATH_FOREACH_PREFIX(s, "/a/b/c/d") {
+        i = 0;
+        PATH_FOREACH_PREFIX_MORE(s, "/a/b/c/d") {
                 log_error("---%s---", s);
                 assert_se(streq(s, values[i++]));
         }
+        assert_se(values[i] == NULL);
 
+        i = 1;
+        PATH_FOREACH_PREFIX(s, "/a/b/c/d") {
+                log_error("---%s---", s);
+                assert_se(streq(s, values[i++]));
+        }
         assert_se(values[i] == NULL);
 
         i = 0;
-        PATH_FOREACH_PREFIX(s, "////a////b////c///d///////")
+        PATH_FOREACH_PREFIX_MORE(s, "////a////b////c///d///////")
                 assert_se(streq(s, values[i++]));
+        assert_se(values[i] == NULL);
 
+        i = 1;
+        PATH_FOREACH_PREFIX(s, "////a////b////c///d///////")
+                assert_se(streq(s, values[i++]));
         assert_se(values[i] == NULL);
 
         PATH_FOREACH_PREFIX(s, "////")
+                assert_not_reached("Wut?");
+
+        b = false;
+        PATH_FOREACH_PREFIX_MORE(s, "////") {
+                assert_se(!b);
                 assert_se(streq(s, ""));
+                b = true;
+        }
+        assert_se(b);
 
         PATH_FOREACH_PREFIX(s, "")
                 assert_not_reached("wut?");
 
+        b = false;
+        PATH_FOREACH_PREFIX_MORE(s, "") {
+                assert(!b);
+                assert(streq(s, ""));
+                b = true;
+        }
 }
 
 int main(void) {
