From ea81ddfdc0eadfb62e28ed998d33c5e1d3b3abab Mon Sep 17 00:00:00 2001
From: Michal Schmidt <mschmidt@redhat.com>
Date: Fri, 20 Feb 2015 02:13:03 +0100
Subject: [PATCH] shared: avoid semi-duplicating socket_address_equal()

Just call socket_address_equal() from socket_address_matches_fd()
instead of implementing similar comparing of addresses.

(cherry picked from commit 02233928a502e46fc125118dba7234ba3e48dc15)
---
 src/shared/socket-util.c | 18 +-----------------
 1 file changed, 1 insertion(+), 17 deletions(-)

diff --git a/src/shared/socket-util.c b/src/shared/socket-util.c
index c31f60e..deecce8 100644
--- a/src/shared/socket-util.c
+++ b/src/shared/socket-util.c
@@ -464,23 +464,7 @@ bool socket_address_matches_fd(const SocketAddress *a, int fd) {
                         return false;
         }
 
-        switch (b.sockaddr.sa.sa_family) {
-
-        case AF_INET:
-                return b.sockaddr.in.sin_port == a->sockaddr.in.sin_port &&
-                        b.sockaddr.in.sin_addr.s_addr == a->sockaddr.in.sin_addr.s_addr;
-
-        case AF_INET6:
-                return b.sockaddr.in6.sin6_port == a->sockaddr.in6.sin6_port &&
-                        memcmp(&b.sockaddr.in6.sin6_addr, &a->sockaddr.in6.sin6_addr, sizeof(struct in6_addr)) == 0;
-
-        case AF_UNIX:
-                return b.sockaddr.size == a->size &&
-                        memcmp(b.sockaddr.un.sun_path, a->sockaddr.un.sun_path, b.size - offsetof(struct sockaddr_un, sun_path)) == 0;
-
-        }
-
-        return false;
+        return socket_address_equal(a, &b);
 }
 
 int sockaddr_pretty(const struct sockaddr *_sa, socklen_t salen, bool translate_ipv6, char **ret) {
