From a347fcea7ab1648cfa28b4fbb903ae95b879b86e Mon Sep 17 00:00:00 2001
From: Peter Hutterer <peter.hutterer@who-t.net>
Date: Fri, 20 Mar 2015 14:00:31 +1000
Subject: [PATCH] udev: builtin-keyboard: invert a condition

No functional changes, just to make the next patch easier to review

(cherry picked from commit 8a0fd83cf03547653a195582ba004d2ff69dfbd0)

Resolves: #1500119
---
 src/udev/udev-builtin-keyboard.c | 56 ++++++++++++++++++++--------------------
 1 file changed, 28 insertions(+), 28 deletions(-)

diff --git a/src/udev/udev-builtin-keyboard.c b/src/udev/udev-builtin-keyboard.c
index f33401790..86f4018ef 100644
--- a/src/udev/udev-builtin-keyboard.c
+++ b/src/udev/udev-builtin-keyboard.c
@@ -115,43 +115,43 @@ static int builtin_keyboard(struct udev_device *dev, int argc, char *argv[], boo
         udev_list_entry_foreach(entry, udev_device_get_properties_list_entry(dev)) {
                 const char *key;
                 char *endptr;
-                unsigned scancode;
-                const char *keycode;
 
                 key = udev_list_entry_get_name(entry);
-                if (!startswith(key, "KEYBOARD_KEY_"))
-                        continue;
-
-                /* KEYBOARD_KEY_<hex scan code>=<key identifier string> */
-                scancode = strtoul(key + 13, &endptr, 16);
-                if (endptr[0] != '\0') {
-                        log_error("Error, unable to parse scan code from '%s'", key);
-                        continue;
-                }
+                if (startswith(key, "KEYBOARD_KEY_")) {
+                        const char *keycode;
+                        unsigned scancode;
+
+                        /* KEYBOARD_KEY_<hex scan code>=<key identifier string> */
+                        scancode = strtoul(key + 13, &endptr, 16);
+                        if (endptr[0] != '\0') {
+                                log_error("Error, unable to parse scan code from '%s'", key);
+                                continue;
+                        }
 
-                keycode = udev_list_entry_get_value(entry);
+                        keycode = udev_list_entry_get_value(entry);
 
-                /* a leading '!' needs a force-release entry */
-                if (keycode[0] == '!') {
-                        keycode++;
+                        /* a leading '!' needs a force-release entry */
+                        if (keycode[0] == '!') {
+                                keycode++;
 
-                        release[release_count] = scancode;
-                        if (release_count <  ELEMENTSOF(release)-1)
-                                release_count++;
+                                release[release_count] = scancode;
+                                if (release_count <  ELEMENTSOF(release)-1)
+                                        release_count++;
 
-                        if (keycode[0] == '\0')
-                                continue;
-                }
+                                if (keycode[0] == '\0')
+                                        continue;
+                        }
 
-                if (fd == -1) {
-                        fd = open(node, O_RDWR|O_CLOEXEC|O_NONBLOCK|O_NOCTTY);
-                        if (fd < 0) {
-                                log_error_errno(errno, "Error, opening device '%s': %m", node);
-                                return EXIT_FAILURE;
+                        if (fd == -1) {
+                                fd = open(node, O_RDWR|O_CLOEXEC|O_NONBLOCK|O_NOCTTY);
+                                if (fd < 0) {
+                                        log_error_errno(errno, "Error, opening device '%s': %m", node);
+                                        return EXIT_FAILURE;
+                                }
                         }
-                }
 
-                map_keycode(fd, node, scancode, keycode);
+                        map_keycode(fd, node, scancode, keycode);
+                }
         }
 
         /* install list of force-release codes */
